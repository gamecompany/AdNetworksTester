default: debug

prepare: # build preparation
	android update lib-project --path . # update android sdk and other properties in local.properties before building
	mkdir -p build #  create needed build directories
	mkdir -p build/src
	mkdir -p build/bin

finalize: # build finalization
	cp -R res build/ # copy resources
	cp AndroidManifest.xml build/ # copy manifes
	cp build.project.properties build/project.properties # copy custom project.properties (has proguard config that doesnt use optimization settings)
	cp .classpath build/ # copy classpath settings (probably not needed)
	cp build.xml build/ # copy build.xml (this is needed for ant to work on the result library)
	cp proguard-project.txt build/ # proguard settings
	cp .project build/

debug: prepare # create debug lib
	echo "Creating debug build"
	ant debug -v # run ant with verbose mode
	ant zip # combine all the jars needed for our lib to work (see custom_rules.xml for reference) and move it under build/libs
	make finalize

release: prepare
	echo "Creating release build"
	ant release -v # run ant with verbose mode (proguard etc)
	ant strip # strip R.java file from the result jar (see custom_rules.xml for reference) and move it under build/libs (leaving R.java file in will cause issues when libary is used by unity on ant as it conflicts with the one generated by the build process)
	make finalize

clean: prepare
	rm -rf build/
	ant clean